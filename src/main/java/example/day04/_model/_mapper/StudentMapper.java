// =======================================================================================
// ✅ [Mapper]. StudentMapper
// fs) DB 직접 접근 계층. @Mapper 필수!
// fe) 이번 실습은 XML 없이 @SQL 어노테이션로만 구성 (수업 가이드와 동일)
// =======================================================================================
package example.day04._model._mapper;

import example.day04._model._dto.StudentDto;
import org.apache.ibatis.annotations.*;

import java.util.List;

@Mapper
public interface StudentMapper {

    // [방법1] .XML (이번 실습은 미사용, 수업 환경에 XML 파일이 남아 있어도 무방)
    // [방법2] @SQL (이번 실습 채택)

    // ===================================================================================
    // ✅ [1]. 등록
    // fe) 성공 시 영향 row 수(1/0) 반환
    // ===================================================================================
    @Insert("INSERT INTO student(name, kor, math) VALUES(#{name}, #{kor}, #{math})")
    int save(StudentDto dto);

    // ===================================================================================
    // ✅ [2]. 전체 조회
    // ===================================================================================
    @Select("SELECT * FROM student ORDER BY sno DESC")
    List<StudentDto> findAll();

    // ===================================================================================
    // ✅ [3]. 수정 (sno 기준)
    // fe) 빈 칸 수정 방지: 프론트에서 prompt로 값 받음
    // ===================================================================================
    @Update("""
            UPDATE student
               SET name = #{name},
                   kor  = #{kor},
                   math = #{math}
             WHERE sno  = #{sno}
            """)
    int update(StudentDto dto);

    // ===================================================================================
    // ✅ [4]. 삭제 (물리 삭제)
    // fe) 소프트 삭제로 바꾸려면 state 컬럼 추가 후 UPDATE로 전환
    // ===================================================================================
    @Delete("DELETE FROM student WHERE sno = #{sno}")
    int delete(int sno);
}