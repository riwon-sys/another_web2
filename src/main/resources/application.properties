# ======================================================================
# ✅ application.properties
# rw 25-09-23 생성
# - 스프링 부트 프로젝트의 환경 설정 파일
# - 서버 포트, DB 연결, MyBatis 매퍼 경로, SQL 자동 실행, 파일 업로드 용량 등을 지정
# ======================================================================

# ----------------------------------------------------------------------
# [1] 내장 톰캣(서버) 포트 설정
# - 기본값은 8080
# - 충돌(다른 서비스가 8080 사용 중) 시 8081, 9090 등으로 변경
# ----------------------------------------------------------------------
server.port=8080

# ----------------------------------------------------------------------
# [2] DB(JDBC) 연동
# - 기존에는 DAO 클래스에서 직접 JDBC 연결했지만,
#   스프링에서는 여기서 설정해두면 자동으로 연결 관리됨
# ----------------------------------------------------------------------
# DB 연결 URL (DB명: springweb2)
spring.datasource.url=jdbc:mysql://localhost:3306/springweb2?serverTimezone=Asia/Seoul&characterEncoding=UTF-8

# DB 계정
spring.datasource.username=root

# DB 비밀번호 (띄어쓰기 주의)
spring.datasource.password=1234

# ----------------------------------------------------------------------
# [3] MyBatis 매퍼(XML) 경로 설정
# - resources/mybatis/mapper/ 안에 있는 모든 .xml 파일을 로드
# - classpath: 는 resources 폴더를 의미
# - camelCase ↔ snake_case 자동 매핑 : user_name → userName
# - SQL 실행 로그를 콘솔에 출력 : 디버깅 편리
# ----------------------------------------------------------------------
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# ----------------------------------------------------------------------
# [4] SQL 스크립트 자동 실행
# - 서버 실행 시 schema.sql / data.sql 실행 여부
# - 개발 초기 : always (테이블 구조, 샘플데이터 매번 리셋)
# - 운영/배포 : never (데이터 날아가는 것 방지)
# ----------------------------------------------------------------------
# 항상 실행 (DROP → CREATE → INSERT)
spring.sql.init.mode=always

# 실행 안 함 (운영 단계에서 주로 사용)
# spring.sql.init.mode=never

# (기본값) 내장DB(H2)일 때만 실행
# spring.sql.init.mode=embedded

# ----------------------------------------------------------------------
# [5] 파일 업로드 설정
# - MultipartFile 용량 제한 (개별 파일 / 전체 요청)
# - 기본은 1MB 제한이므로, 실습 편의상 100MB로 확장
# ----------------------------------------------------------------------
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB
# server.tomcat.max-swallow-size=-1  # (선택) 톰캣의 요청 본문 크기 제한 해제